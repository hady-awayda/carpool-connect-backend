generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRolesEnum {
  user
  admin
}

enum RideUserTypeEnum {
  rider
  passenger
  partnership
}

enum UserRelationshipsStatusEnum {
  requested
  approved
  declined
  active
  ended
}

enum AgreementStatus {
  pending
  agreed
  modified
  canceled
}

enum RideAgreementsStatusEnum {
  pending
  accepted
  rejected
}

// Models
model User {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  email          String   @unique
  password       String   @db.VarChar(255)
  role           UserRolesEnum @default(user)
  phoneNumber    String?  @db.VarChar(20)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?

  // Relationships
  rideSchedules  RideSchedule[]
}

model RideSchedule {
  id              Int      @id @default(autoincrement())
  userId          Int
  rideUserType    RideUserTypeEnum @default(rider)
  departureLat    Float
  departureLng    Float
  destinationLat  Float
  destinationLng  Float
  ridePreferencesId Int
  departureTime   DateTime
  arrivalTime     DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  // Foreign Keys
  user            User     @relation(fields: [userId], references: [id])
  ridePreferences RidePreferences @relation(fields: [ridePreferencesId], references: [id])
}

model RidePreferences {
  id                    Int      @id @default(autoincrement())
  maxProximityKm        Float    @default(5.00)
  maxTimeDeviationMin   Int      @default(10)
  preferredRideDeparture DateTime?
  preferredRideArrival  DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  deletedAt             DateTime?

  // Foreign Key to RideSchedule
  RideSchedule RideSchedule[]

  @@unique([id], name: "unique_user_preferences")
}

model UserMatch {
  id             Int      @id @default(autoincrement())
  userId1        Int
  userId2        Int
  status         UserRelationshipsStatusEnum @default(requested)
  requestedBy    Int
  responseBy     Int?
  requestedAt    DateTime @default(now())
  approvedAt     DateTime?
  updatedAt      DateTime @updatedAt

  user1          User @relation("User1", fields: [userId1], references: [id])
  user2          User @relation("User2", fields: [userId2], references: [id])
}

model MatchedRide {
  id                         Int      @id @default(autoincrement())
  rideScheduleId1            Int
  rideScheduleId2            Int
  routeDeviationTimeMin      Int      @default(0)
  routeDeviationDistanceKm   Float    @default(0.00)
  agreedDepartureTime        DateTime
  agreedArrivalTime          DateTime
  carDetails                 String?
  user1AgreementStatus       AgreementStatus @default(pending)
  user2AgreementStatus       AgreementStatus @default(pending)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  deletedAt                  DateTime?
  createdBy                  Int?
  updatedBy                  Int?
  deletedBy                  Int?

  rideSchedule1              RideSchedule @relation("ride1", fields: [rideScheduleId1], references: [id])
  rideSchedule2              RideSchedule @relation("ride2", fields: [rideScheduleId2], references: [id])

  rideAgreements             RideAgreement[]
}

model RideAgreement {
  id                         Int      @id @default(autoincrement())
  matchedRideId              Int
  proposedBy                 Int
  proposedRouteDeviationTimeMin Int     @default(0)
  proposedRouteDeviationDistanceKm Float @default(0.00)
  proposedDepartureTime      DateTime
  proposedArrivalTime        DateTime
  status                     RideAgreementsStatusEnum @default(pending)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  deletedAt                  DateTime?


  matchedRide                MatchedRide @relation(fields: [matchedRideId], references: [id])
  proposedByUser             User @relation(fields: [proposedBy], references: [id])
}